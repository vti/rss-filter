#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use HTTP::Tiny;
use File::Basename qw(basename);
use CPAN::Changes;

my $opt_last = 'wait-for-recent.txt';
my $opt_rss  = '/tmp/recent.rss';
my $opt_exec;
my $opt_verbose;
GetOptions(
    'last=s'  => \$opt_last,
    'exec=s'  => \$opt_exec,
    'verbose' => \$opt_verbose
) or die("Error in command line arguments\n");

print STDERR "Mirroring...\n" if $opt_verbose;

my $result =
  HTTP::Tiny->new->mirror( 'https://metacpan.org/feed/recent?size=100',
    $opt_rss );
die 'request failed' unless $result->{success};

my $rss = _slurp($opt_rss);

my @releases =
  $rss =~ m{<rdf:li rdf:resource="https://metacpan\.org/release/(.*?)" />}g;

my $last = -f $opt_last ? _slurp($opt_last) : undef;

if ( !$last ) {
    print STDERR "No last release found, taking everything\n"
      if $opt_verbose;
}
else {
    print STDERR "Last release was $last\n" if $opt_verbose;

    if ( grep { $last eq $_ } @releases ) {
        pop @releases while @releases && $releases[-1] ne $last;
        pop @releases;
    }
}

exit 0 unless @releases;

pop @releases while @releases > 20;

_spew( $opt_last, $releases[0] );

foreach my $release (@releases) {
    print STDERR "Working on $release...\n" if $opt_verbose;

    my $meta =
      HTTP::Tiny->new->get("http://fastapi.metacpan.org/v1/release/$release");
    next unless $meta->{success};

    # Poor's man JSON decoder
    my ($module) = $meta->{content} =~ m/"download_url"\s*:\s*"(.*?)"/;

    my ($author)       = $meta->{content} =~ m/"author"\s*:\s*"(.*?)"/;
    my ($changes_file) = $meta->{content} =~ m/"changes_file"\s*:\s*"(.*?)"/;

    if ($changes_file) {
        my $dist = basename $module;
        $dist =~ s{\.tar\.gz$}{};

        my $changes_url =
          "http://fastapi.metacpan.org/source/$author/$dist/$changes_file";

        my $changes_content = HTTP::Tiny->new->get($changes_url);
        next unless $changes_content->{success};

        my $changes = CPAN::Changes->load_string( $changes_content->{content} );

        my @releases = $changes->releases;
        if ( my $last_release = shift @releases ) {
            my $last_release_text = $last_release->serialize;

            if ( $last_release_text =~
                m/(?:cve-\d+|security\s+issue|vulnerability)/msi )
            {
                if ($opt_exec) {
                    $ENV{TITLE} = $dist;
                    $ENV{LINK}  = $module;

                    print STDERR "Executing command: $opt_exec\n"
                      if $opt_verbose;

                    system($opt_exec);
                }
            }
        }
    }

    sleep 1;
}

sub _slurp {
    my $content = do { local $/; open my $fh, '<', $_[0] or die $!; <$fh> };

    chomp $content;

    return $content;
}

sub _spew {
    open my $fh, '>', $_[0] or die $!;
    print $fh $_[1];
}
